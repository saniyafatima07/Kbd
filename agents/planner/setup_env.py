#!/usr/bin/env python3
"""
Environment setup script for the Enhanced Planner Agent.

This script helps you set up the environment variables and verify
that all required services are accessible.
"""

import os
import sys
import subprocess
import requests
from typing import Dict, List, Tuple


def print_header(title: str):
    """Print a formatted header."""
    print(f"\n{'='*60}")
    print(f"  {title}")
    print(f"{'='*60}")


def print_step(step: int, description: str):
    """Print a formatted step."""
    print(f"\n{step}. {description}")
    print("-" * 40)


def check_service(url: str, name: str) -> bool:
    """Check if a service is accessible."""
    try:
        response = requests.get(url, timeout=5)
        return response.status_code in [200, 404]  # 404 is OK for some services
    except requests.exceptions.RequestException:
        return False


def get_user_input(prompt: str, required: bool = True) -> str:
    """Get user input with validation."""
    while True:
        value = input(f"{prompt}: ").strip()
        if value or not required:
            return value
        print("This field is required. Please enter a value.")


def create_env_file(env_vars: Dict[str, str]):
    """Create or update the .env file."""
    env_file = ".env"
    
    # Read existing .env file if it exists
    existing_vars = {}
    if os.path.exists(env_file):
        with open(env_file, 'r') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    existing_vars[key] = value
    
    # Merge with new variables
    existing_vars.update(env_vars)
    
    # Write the .env file
    with open(env_file, 'w') as f:
        f.write("# Enhanced Planner Agent Environment Configuration\n")
        f.write("# Generated by setup_env.py\n\n")
        
        f.write("# Core Configuration\n")
        f.write(f"RABBITMQ_URL={existing_vars.get('RABBITMQ_URL', 'amqp://guest:guest@localhost:5673/')}\n")
        f.write(f"GEMINI_API_KEY={existing_vars.get('GEMINI_API_KEY', '')}\n")
        f.write(f"GEMINI_MODEL={existing_vars.get('GEMINI_MODEL', 'gemini-1.5-flash')}\n\n")
        
        f.write("# Context Enrichment Services\n")
        f.write(f"LOKI_URL={existing_vars.get('LOKI_URL', 'http://localhost:3100')}\n")
        f.write(f"CHROMADB_URL={existing_vars.get('CHROMADB_URL', 'http://localhost:8002')}\n")
        f.write(f"GITHUB_TOKEN={existing_vars.get('GITHUB_TOKEN', '')}\n")
        f.write(f"TAVILY_API_KEY={existing_vars.get('TAVILY_API_KEY', '')}\n")
        f.write(f"CONFIDENCE_THRESHOLD={existing_vars.get('CONFIDENCE_THRESHOLD', '0.8')}\n\n")
        
        f.write("# GitHub Repository Configuration (Optional)\n")
        f.write(f"GITHUB_REPO_OWNER={existing_vars.get('GITHUB_REPO_OWNER', '')}\n")
        f.write(f"GITHUB_REPO_NAME={existing_vars.get('GITHUB_REPO_NAME', '')}\n\n")
        
        f.write("# ChromaDB Configuration (Optional)\n")
        f.write(f"CHROMADB_COLLECTION_NAME={existing_vars.get('CHROMADB_COLLECTION_NAME', 'incident_history')}\n")
        f.write(f"CHROMADB_EMBEDDING_MODEL={existing_vars.get('CHROMADB_EMBEDDING_MODEL', 'sentence-transformers/all-MiniLM-L6-v2')}\n\n")
        
        f.write("# Web Search Configuration (Optional)\n")
        f.write(f"WEB_SEARCH_MAX_RESULTS={existing_vars.get('WEB_SEARCH_MAX_RESULTS', '5')}\n")
        f.write(f"WEB_SEARCH_TIMEOUT={existing_vars.get('WEB_SEARCH_TIMEOUT', '10')}\n")
    
    print(f"✅ Environment file created: {env_file}")


def check_services():
    """Check if all required services are accessible."""
    print_step(1, "Checking External Services")
    
    services = [
        ("Loki (Logs)", "http://localhost:3100/ready"),
        ("ChromaDB (Vector DB)", "http://localhost:8002/api/v1/heartbeat"),
        ("RabbitMQ", "http://localhost:15673"),
    ]
    
    all_accessible = True
    for name, url in services:
        if check_service(url, name):
            print(f"✅ {name}: Accessible")
        else:
            print(f"❌ {name}: Not accessible")
            all_accessible = False
    
    if not all_accessible:
        print("\n⚠️  Some services are not accessible. Please ensure they are running:")
        print("   - Loki: docker-compose -f loki-docker-compose.yml up -d")
        print("   - ChromaDB: docker-compose -f chromadb-docker-compose.yml up -d")
        print("   - RabbitMQ: docker-compose -f rabbitmq-docker-compose.yml up -d")
    
    return all_accessible


def get_api_keys():
    """Get API keys from user input."""
    print_step(2, "API Keys Configuration")
    
    print("You'll need to obtain API keys from the following services:")
    print("1. Google Gemini: https://makersuite.google.com/app/apikey")
    print("2. GitHub: https://github.com/settings/tokens")
    print("3. Tavily: https://tavily.com/")
    
    env_vars = {}
    
    # Gemini API Key
    gemini_key = get_user_input("Enter your Gemini API key (required)", required=True)
    if gemini_key:
        env_vars['GEMINI_API_KEY'] = gemini_key
    
    # GitHub Token
    github_token = get_user_input("Enter your GitHub token (required)", required=True)
    if github_token:
        env_vars['GITHUB_TOKEN'] = github_token
    
    # Tavily API Key
    tavily_key = get_user_input("Enter your Tavily API key (required)", required=True)
    if tavily_key:
        env_vars['TAVILY_API_KEY'] = tavily_key
    
    return env_vars


def get_github_config():
    """Get GitHub repository configuration."""
    print_step(3, "GitHub Repository Configuration (Optional)")
    
    print("If you want to analyze commits from a specific repository, provide:")
    
    repo_owner = get_user_input("GitHub username or organization (optional)", required=False)
    repo_name = get_user_input("Repository name (optional)", required=False)
    
    env_vars = {}
    if repo_owner:
        env_vars['GITHUB_REPO_OWNER'] = repo_owner
    if repo_name:
        env_vars['GITHUB_REPO_NAME'] = repo_name
    
    return env_vars


def test_imports():
    """Test if all required modules can be imported."""
    print_step(4, "Testing Module Imports")
    
    modules = [
        ("context.gatherer", "ContextGatherer"),
        ("core.planner_engine", "PlannerEngine"),
        ("models.incident", "IncidentModel"),
        ("models.context", "EnrichedContext"),
    ]
    
    all_imported = True
    for module, class_name in modules:
        try:
            exec(f"from {module} import {class_name}")
            print(f"✅ {module}.{class_name}: Imported successfully")
        except ImportError as e:
            print(f"❌ {module}.{class_name}: Import failed - {e}")
            all_imported = False
    
    if not all_imported:
        print("\n⚠️  Some modules failed to import. Please install dependencies:")
        print("   pip install -r requirements.txt")
    
    return all_imported


def main():
    """Main setup function."""
    print_header("Enhanced Planner Agent - Environment Setup")
    
    print("This script will help you set up the environment for the Enhanced Planner Agent.")
    print("Make sure you have:")
    print("- Python 3.8+ installed")
    print("- Docker installed and running")
    print("- API keys for Gemini, GitHub, and Tavily")
    
    input("\nPress Enter to continue...")
    
    # Check services
    services_ok = check_services()
    
    # Get API keys
    api_keys = get_api_keys()
    
    # Get GitHub config
    github_config = get_github_config()
    
    # Test imports
    imports_ok = test_imports()
    
    # Create environment file
    print_step(5, "Creating Environment File")
    all_env_vars = {**api_keys, **github_config}
    create_env_file(all_env_vars)
    
    # Summary
    print_header("Setup Summary")
    
    if services_ok:
        print("✅ External services: All accessible")
    else:
        print("❌ External services: Some not accessible")
    
    if api_keys:
        print("✅ API keys: Configured")
    else:
        print("❌ API keys: Not configured")
    
    if imports_ok:
        print("✅ Python modules: All imported successfully")
    else:
        print("❌ Python modules: Some import failures")
    
    print("\nNext steps:")
    print("1. Start the Enhanced Planner: python main.py")
    print("2. Test the setup: python test_enhanced_planner.py")
    print("3. Check diagnostics: curl http://localhost:8001/diagnostics/enhanced")
    
    if not services_ok or not imports_ok:
        print("\n⚠️  Please resolve the issues above before starting the planner.")


if __name__ == "__main__":
    main()
